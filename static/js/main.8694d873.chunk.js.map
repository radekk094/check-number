{"version":3,"sources":["layouts/Header.js","layouts/Navigation.js","pages/Pesel.js","pages/Nip.js","pages/Regon.js","pages/IdCard.js","pages/BankAccount.js","pages/ErrorPage.js","layouts/Page.js","layouts/Footer.js","layouts/App.js","index.js"],"names":["withRouter","react_default","a","createElement","Fragment","react_router","path","exact","render","Navigation","state","navActive","list","name","handleBurgerClick","_this","setState","prevState","handleMenuClick","menu","map","item","key","react_router_dom","onClick","to","className","this","Component","Pesel","peselNumber","peselChecked","peselCorrect","gender","birthDate","peselFactor","handleChangePesel","e","target","value","toString","handleSubmitPesel","preventDefault","length","checkPesel","peselElementsSum","i","parseInt","checkBirthDate","yyFirstPart","Math","floor","slice","yySecondPart","mm","dd","concat","onSubmit","type","onChange","Nip","nipNumber","nipChecked","nipCorrect","taxOfficeName","nipFactor","handleChangeNip","handleSubmitNip","checkNip","nipElementsSum","fetchTaxOfficeName","officeId","fetch","then","response","json","data","offices","forEach","office","id","officeName","Regon","regonNumber","regonChecked","regonCorrect","regonFactor","regonFactorLong","handleChangeRegon","handleSubmitRegon","checkRegon","checkRegonLong","regonElementsSum","IdCard","idCardNumber","idCardChecked","idCardCorrect","idCardFactor","letterConverters","handleChangeIdCard","handleSubmitIdCard","checkIdCard","idCardLetters","idCardDigits","idCardElementsSum","numberFromLetter","getNumberFromLetter","letter","number","letterConverter","toLowerCase","fetchLetterConverters","converters","BankAccount","bankAccountCountry","bankAccountNumber","bankAccountChecked","bankAccountCorrect","bankName","bankIdentifierFactor","letterConvertes","handleChangeBankAccount","handleSubmitBankAccount","checkBankIdentifier","checkBankAccount","bankIdentifier","bankIdentifierElementsSum","isCorrect","fetchBankName","bankId","banks","bank","accountToCheck","rest","readOnly","ErrorPage","Page","component","Footer","App","basename","process","layouts_Navigation","layouts_Header","layouts_Page","layouts_Footer","ReactDOM","layouts_App","document","getElementById"],"mappings":"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","file":"static/js/main.8694d873.chunk.js","sourcesContent":["import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport '../styles/Header.css';\n\nconst Header = () => {\n    return (\n        <>\n            <Switch>\n                <Route path=\"/\" exact render={() => (\n                    <h1>Sprawdź numer <span>pesel</span></h1>\n                )} />\n                <Route path=\"/nip\" render={() => (\n                    <h1>Sprawdź numer <span>nip</span></h1>\n                )} />\n                <Route path=\"/regon\" render={() => (\n                    <h1>Sprawdź numer <span>regon</span></h1>\n                )} />\n                <Route path=\"/idcard\" render={() => (\n                    <h1>Sprawdź numer <span>dowodu&nbsp;osobistego</span></h1>\n                )} />\n                <Route path=\"/bankaccount\" render={() => (\n                    <h1>Sprawdź numer <span>konta&nbsp;bankowego</span></h1>\n                )} />\n                <Route render={() => (\n                    <h1>Strona nie istnieje</h1>\n                )} />\n            </Switch>\n        </>\n    );\n}\n\nexport default withRouter(Header);","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../styles/Navigation.css';\n\nclass Navigation extends Component {\n    state = {\n        navActive: false\n    }\n\n    list = [\n        { name: \"Pesel\", path: \"/\", exact: true },\n        { name: \"Nip\", path: \"/nip\" },\n        { name: \"Regon\", path: \"/regon\" },\n        { name: \"Dowód osobisty\", path: \"/idcard\" },\n        { name: \"Konto bankowe\", path: \"/bankaccount\" }\n    ]\n\n    handleBurgerClick = () => {\n        this.setState(prevState => ({\n            navActive: !prevState.navActive\n        }));\n    }\n\n    handleMenuClick = () => {\n        this.setState({\n            navActive: false\n        });\n    }\n\n    menu = this.list.map((item) => (\n        <li key={item.name}>\n            <NavLink\n                onClick={this.handleMenuClick}\n                to={item.path}\n                exact={item.exact ? item.exact : false}\n            >\n                {item.name}\n            </NavLink>\n        </li>\n    ));\n\n    render() {\n        return (\n            <nav className={this.state.navActive ? \"activeMenu\" : \"\"}>\n                <ul>\n                    {this.menu}\n                </ul>\n                <div><i className=\"fas fa-bars\" onClick={this.handleBurgerClick}></i></div>\n            </nav>\n        );\n    }\n\n}\n\nexport default Navigation;","import React, { Component } from 'react';\n\nclass Pesel extends Component {\n    state = {\n        peselNumber: \"\", // pesel number from the form\n        peselChecked: false, // has the pesel already been checked?\n        peselCorrect: false, // is the pesel correct?\n        gender: \"\", // gender based on the pesel\n        birthDate: \"\" // date of birth based on the pesel\n    }\n\n    // factors, which are used to check, if the pesel is correct\n    peselFactor = \"1379137913\";\n\n    // method, which changes the state with data from the form and resets result of the app (because after changing data, App shouldn't show the result)\n    handleChangePesel = (e) => {\n        const peselNumber = e.target.value.toString()\n        this.setState({\n            peselNumber,\n            peselChecked: false,\n            peselCorrect: false,\n            gender: \"\",\n            birthDate: \"\"\n        });\n    }\n\n    // method, which checks, if the pesel number length is correct - and if the length is correct, it calls another method, which checks, if the pesel is correct\n    handleSubmitPesel = (e) => {\n        e.preventDefault();\n        if (this.state.peselNumber.length !== 11) {\n            this.setState({\n                peselChecked: true,\n                peselCorrect: false\n            })\n        } else {\n            this.checkPesel();\n        }\n    }\n\n    // method, which checks, if the pesel is correct and it also sets gender based on the pesel\n    checkPesel = () => {\n        let peselElementsSum = 0;\n\n        for (let i = 0; i < 10; i++) {\n            peselElementsSum += (this.state.peselNumber[i] * this.peselFactor[i]);\n        }\n\n        peselElementsSum = 10 - (peselElementsSum % 10);\n\n        const peselCorrect = ((peselElementsSum % 10) === parseInt(this.state.peselNumber[10]));\n        const gender = ((this.state.peselNumber[9] % 2 === 0) ? \"kobieta\" : \"mężczyzna\");\n        const birthDate = this.checkBirthDate();\n\n        this.setState({\n            peselChecked: true,\n            peselCorrect,\n            gender,\n            birthDate\n        });\n    }\n\n    // method, which sets date of birth based on the pesel\n    checkBirthDate = () => {\n        let yyFirstPart;\n\n        switch (Math.floor(parseInt(this.state.peselNumber.slice(2, 4)) / 20)) {\n            case 0:\n                yyFirstPart = 19;\n                break;\n            case 1:\n                yyFirstPart = 20;\n                break;\n            case 2:\n                yyFirstPart = 21;\n                break;\n            case 3:\n                yyFirstPart = 22;\n                break;\n            default:\n                yyFirstPart = 18;\n        }\n\n        const yySecondPart = this.state.peselNumber.slice(0, 2);\n        const mm = (parseInt(this.state.peselNumber.slice(2, 4)) % 20);\n        const dd = this.state.peselNumber.slice(4, 6);\n\n        return `${dd}.${(mm > 9 ? mm : `0${mm}`)}.${yyFirstPart}${yySecondPart}r.`;\n    }\n\n    // rendering the component with two parts - form to enter pesel number and the program result\n    render() {\n        return (\n            <section className=\"pesel\">\n                <form onSubmit={this.handleSubmitPesel}>\n                    <span>Podaj numer pesel:</span>\n                    <input\n                        type=\"number\"\n                        value={this.state.peselNumber}\n                        onChange={this.handleChangePesel}\n                    />\n                    <button>Sprawdź</button>\n                </form>\n                {this.state.peselChecked ? (\n                    <div className=\"result\">\n                        <h2>Weryfikacja</h2>\n                        <p>\n                            {this.state.peselCorrect ? (\n                                <span className=\"correct\"><i className=\"fas fa-check-circle\"></i> pesel poprawny</span>\n                            ) : (\n                                    <span className=\"incorrect\"><i className=\"fas fa-times-circle\"></i> pesel błędny</span>\n                                )\n                            }\n                        </p>\n                        {this.state.peselCorrect ? (\n                            <>\n                                <p>Płeć: <span>{this.state.gender}</span></p>\n                                <p>Data urodzenia: {this.state.birthDate}</p>\n                            </>\n                        ) : null}\n                    </div>\n                ) : null}\n            </section>\n        );\n    }\n}\n\nexport default Pesel;","import React, { Component } from 'react';\n\nclass Nip extends Component {\n    state = {\n        nipNumber: \"\", // nip number from the form\n        nipChecked: false, // has the nip already been checked?\n        nipCorrect: false, // is the nip correct?\n        taxOfficeName: \"\" // Tax Office Name based on the nip number\n    }\n\n    // factors, which are used to check, if the nip is correct\n    nipFactor = \"657234567\";\n\n    // method, which changes the state with data from the form and resets result of the app (because after changing data, App shouldn't show the result)\n    handleChangeNip = (e) => {\n        const nipNumber = e.target.value.toString()\n        this.setState({\n            nipNumber,\n            nipChecked: false,\n            nipCorrect: false,\n            taxOfficeName: \"\"\n        });\n    }\n\n    // method, which checks, if the nip number length is correct - and if the length is correct, it calls another method, which checks, if the nip is correct\n    handleSubmitNip = (e) => {\n        e.preventDefault();\n        if (this.state.nipNumber.length !== 10) {\n            this.setState({\n                nipChecked: true,\n                nipCorrect: false\n            })\n        } else {\n            this.checkNip();\n        }\n    }\n\n    // method, which checks, if the nip is correct\n    checkNip = () => {\n        let nipElementsSum = 0;\n\n        for (let i = 0; i < 9; i++) {\n            nipElementsSum += this.state.nipNumber[i] * this.nipFactor[i];\n        }\n\n        const result = ((nipElementsSum % 11 === 10) ? 0 : (nipElementsSum % 11));\n        const nipCorrect = (result === parseInt(this.state.nipNumber[9]));\n\n        this.setState({\n            nipChecked: true,\n            nipCorrect\n        })\n\n        this.fetchTaxOfficeName();\n    }\n\n    // method, which sets the Tax Office Name based on the nip number and data from another file\n    fetchTaxOfficeName = () => {\n        const officeId = this.state.nipNumber.slice(0, 3);\n\n        fetch('data/taxOffices.json')\n            .then(response => response.json())\n            .then(data => {\n                let taxOfficeName = \"Brak Urzędu w bazie\";\n                data.offices.forEach(office => {\n                    if (office.id === officeId) {\n                        taxOfficeName = office.officeName;\n                        return;\n                    }\n                });\n                this.setState({\n                    taxOfficeName\n                });\n            });\n    }\n\n    // rendering the component with two parts - form to enter nip number and the program result\n    render() {\n        return (\n            <section className=\"nip\">\n                <form onSubmit={this.handleSubmitNip}>\n                    <span>Podaj numer nip:</span>\n                    <input\n                        type=\"number\"\n                        value={this.state.nipNumber}\n                        onChange={this.handleChangeNip}\n                    />\n                    <button>Sprawdź</button>\n                </form>\n                {this.state.nipChecked ? (\n                    <div className=\"result\">\n                        <h2>Weryfikacja</h2>\n                        <p>\n                            {this.state.nipCorrect ? (\n                                <span className=\"correct\"><i className=\"fas fa-check-circle\"></i> nip poprawny</span>\n                            ) : (\n                                    <span className=\"incorrect\"><i className=\"fas fa-times-circle\"></i> nip błędny</span>\n                                )\n                            }\n                        </p>\n                        {this.state.nipCorrect ? <p>Nazwa urzędu: <span>{this.state.taxOfficeName}</span></p> : null}\n                    </div>\n                ) : null}\n            </section>\n        );\n    }\n}\n\nexport default Nip;","import React, { Component } from 'react';\n\nclass Regon extends Component {\n    state = {\n        regonNumber: \"\", // regon number from the form\n        regonChecked: false, // has the regon already been checked?\n        regonCorrect: false // is the regon correct?\n    }\n\n    // factors, which are used to check, if the regon is correct (there are two variants of factor, because thera are two variants of regon - nine-digit and fourteen-digit)\n    regonFactor = \"89234567\";\n    regonFactorLong = \"2485097361248\";\n\n    // method, which changes the state with data from the form and resets result of the app (because after changing data, App shouldn't show the result)\n    handleChangeRegon = (e) => {\n        const regonNumber = e.target.value.toString()\n        this.setState({\n            regonNumber,\n            regonChecked: false,\n            regonCorrect: false\n        });\n    }\n\n    // method, which checks, if the regon number length is correct - and if the length is correct, it calls another method, which checks, if the regon is correct (there are two methods to check the correctness of the regon, because there are two variants of regon - nine-digit and fourteen-digit)\n    handleSubmitRegon = (e) => {\n        e.preventDefault();\n        if (this.state.regonNumber.length === 9) {\n            const regonCorrect = this.checkRegon();\n            this.setState({\n                regonChecked: true,\n                regonCorrect\n            })\n        } else if (this.state.regonNumber.length === 14) {\n            const regonCorrect = (this.checkRegon() && this.checkRegonLong());\n            this.setState({\n                regonChecked: true,\n                regonCorrect\n            })\n        } else {\n            this.setState({\n                regonChecked: true,\n                regonCorrect: false\n            })\n        }\n    }\n\n    // method, which checks, if the nine-digit regon is correct\n    checkRegon = () => {\n        let regonElementsSum = 0;\n\n        for (let i = 0; i < 8; i++) {\n            regonElementsSum += this.state.regonNumber[i] * this.regonFactor[i];\n        }\n\n        const result = ((regonElementsSum % 11 === 10) ? 0 : (regonElementsSum % 11));\n        const isCorrect = (result === parseInt(this.state.regonNumber[8]));\n\n        return isCorrect;\n    }\n\n    // method, which checks, if the fourteen-digit regon is correct\n    checkRegonLong = () => {\n        let regonElementsSum = 0;\n\n        for (let i = 0; i < 13; i++) {\n            regonElementsSum += this.state.regonNumber[i] * this.regonFactorLong[i];\n        }\n\n        const result = ((regonElementsSum % 11 === 10) ? 0 : (regonElementsSum % 11));\n        const isCorrect = (result === parseInt(this.state.regonNumber[13]));\n\n        return isCorrect;\n    }\n\n    // rendering the component with two parts - form to enter regon number and the program result\n    render() {\n        return (\n            <section className=\"regon\">\n                <form onSubmit={this.handleSubmitRegon}>\n                    <span>Podaj numer regon:</span>\n                    <input\n                        type=\"number\"\n                        value={this.state.regonNumber}\n                        onChange={this.handleChangeRegon}\n                    />\n                    <button>Sprawdź</button>\n                </form>\n                {this.state.regonChecked ? (\n                    <div className=\"result\">\n                        <h2>Weryfikacja</h2>\n                        <p>\n                            {this.state.regonCorrect ? (\n                                <span className=\"correct\"><i className=\"fas fa-check-circle\"></i> regon poprawny</span>\n                            ) : (\n                                    <span className=\"incorrect\"><i className=\"fas fa-times-circle\"></i> regon błędny</span>\n                                )\n                            }\n                        </p>\n                    </div>\n                ) : null}\n            </section>\n        );\n    }\n}\n\nexport default Regon;","import React, { Component } from 'react';\n\nclass IdCard extends Component {\n    state = {\n        idCardNumber: \"\", // ID card number from the form\n        idCardChecked: false, // has the ID card already been checked?\n        idCardCorrect: false // is the ID card correct?\n    }\n\n    // factors, which are used to check, if the ID card is correct\n    idCardFactor = \"73173173\";\n\n    // empty array for the letter converters (from another file) - because the ID card number includes some letters and the App has to replace these letters with numbers\n    letterConverters = [];\n\n    // method, which changes the state with data from the form and resets result of the app (because after changing data, App shouldn't show the result)\n    handleChangeIdCard = (e) => {\n        const idCardNumber = e.target.value.toString();\n        this.setState({\n            idCardNumber,\n            idCardChecked: false,\n            idCardCorrect: false\n        });\n    }\n\n    // method, which checks, if the ID card number length is correct - and if the length is correct, it calls another method, which checks, if the ID card is correct\n    handleSubmitIdCard = (e) => {\n        e.preventDefault();\n        if (this.state.idCardNumber.length !== 9) {\n            this.setState({\n                idCardChecked: true,\n                idCardCorrect: false\n            })\n        } else {\n            this.checkIdCard();\n        }\n    }\n\n    // method, which checks, if the ID card is correct\n    checkIdCard = () => {\n        const idCardLetters = this.state.idCardNumber.slice(0, 3);\n        const idCardDigits = this.state.idCardNumber.slice(4);\n\n        let idCardElementsSum = 0;\n\n        for (let i = 0; i < 3; i++) {\n            const numberFromLetter = this.getNumberFromLetter(idCardLetters[i])\n            if (numberFromLetter === 0) {\n                this.setState({\n                    idCardChecked: true,\n                    idCardCorrect: false\n                });\n                return;\n            }\n            idCardElementsSum += (numberFromLetter * this.idCardFactor[i]);\n        }\n\n        for (let i = 0; i < 5; i++) {\n            idCardElementsSum += (idCardDigits[i] * this.idCardFactor[i]);\n        }\n\n        const idCardCorrect = ((idCardElementsSum % 10) === parseInt(this.state.idCardNumber[3]));\n\n        this.setState({\n            idCardChecked: true,\n            idCardCorrect\n        });\n    }\n\n    // method, which replace letters, from the ID card number, with numbers\n    getNumberFromLetter = (letter) => {\n        let number = 0;\n        this.letterConverters.forEach(letterConverter => {\n            if (letterConverter.letter === letter.toLowerCase()) {\n                number = letterConverter.number;\n            }\n        });\n        return number;\n    }\n\n    // method, which downloads letter converters from another file and saves it in this component\n    fetchLetterConverters = () => {\n        fetch('data/letterConverters.json')\n            .then(response => response.json())\n            .then(data => {\n                this.letterConverters = data.converters;\n            });\n    }\n\n    // method, which is called after first rendering the component - it calls fetch method, which gets letter converters from another file\n    componentDidMount() {\n        this.fetchLetterConverters();\n    }\n\n    // rendering the component with two parts - form to enter ID card number and the program result\n    render() {\n        return (\n            <section className=\"idCard\">\n                <form onSubmit={this.handleSubmitIdCard}>\n                    <span>Podaj numer dowodu:</span>\n                    <input\n                        type=\"text\"\n                        value={this.state.idCardNumber}\n                        onChange={this.handleChangeIdCard}\n                    />\n                    <button>Sprawdź</button>\n                </form>\n                {this.state.idCardChecked ? (\n                    <div className=\"result\">\n                        <h2>Weryfikacja</h2>\n                        <p>\n                            {this.state.idCardCorrect ? (\n                                <span className=\"correct\"><i className=\"fas fa-check-circle\"></i> numer poprawny</span>\n                            ) : (\n                                    <span className=\"incorrect\"><i className=\"fas fa-times-circle\"></i> numer błędny</span>\n                                )\n                            }\n                        </p>\n                    </div>\n                ) : null}\n            </section>\n        );\n    }\n}\n\nexport default IdCard;","import React, { Component } from 'react';\n\nclass BankAccount extends Component {\n    state = {\n        bankAccountCountry: \"PL\", // country of bank account (default value: PL)\n        bankAccountNumber: \"\", // bank account number from the form\n        bankAccountChecked: false, // has the bank account already been checked?\n        bankAccountCorrect: false, // is the bank account correct?\n        bankName: \"\" // Bank Name based on the bank account number\n    }\n\n    // factors, which are used to check, if the first part of the bank account number (the bank identifier) is correct\n    bankIdentifierFactor = \"3971397\";\n\n    // empty array for the letter converters (from another file) - because the bank account number includes some letters and the App has to replace these letters with numbers\n    letterConvertes = [];\n\n    // method, which changes the state with data from the form and resets result of the app (because after changing data, App shouldn't show the result)\n    handleChangeBankAccount = (e) => {\n        const bankAccountNumber = e.target.value.toString()\n        this.setState({\n            bankAccountNumber,\n            bankAccountChecked: false,\n            bankAccountCorrect: false,\n            bankName: \"\"\n        });\n    }\n\n    // method, which checks, if the bank account number length is correct - and if the length is correct, it calls another method, which checks, if the bank account is correct\n    handleSubmitBankAccount = (e) => {\n        e.preventDefault();\n        if (this.state.bankAccountNumber.length !== 26) {\n            this.setState({\n                bankAccountChecked: true,\n                bankAccountCorrect: false\n            });\n        } else {\n            const bankAccountCorrect = (this.checkBankIdentifier() && this.checkBankAccount());\n            this.setState({\n                bankAccountChecked: true,\n                bankAccountCorrect\n            });\n        }\n    }\n\n    // method, which checks, if the first part of the bank account number (the bank identifier) is correct\n    checkBankIdentifier = () => {\n        const bankIdentifier = this.state.bankAccountNumber.slice(2, 10);\n        let bankIdentifierElementsSum = 0;\n\n        for (let i = 0; i < 7; i++) {\n            bankIdentifierElementsSum += bankIdentifier[i] * this.bankIdentifierFactor[i];\n        }\n\n        bankIdentifierElementsSum = 10 - (bankIdentifierElementsSum % 10);\n        const isCorrect = ((bankIdentifierElementsSum % 10) === parseInt(bankIdentifier[7]));\n\n        this.fetchBankName();\n        return isCorrect;\n    }\n\n    // method, which sets the Bank Name based on the bank account number and data from another file\n    fetchBankName = () => {\n        const bankId = this.state.bankAccountNumber.slice(2, 6);\n\n        fetch('data/bankNames.json')\n            .then(response => response.json())\n            .then(data => {\n                let bankName = \"Brak banku w bazie\";\n                data.banks.forEach(bank => {\n                    if (bank.id === bankId) {\n                        bankName = bank.bankName;\n                        return;\n                    }\n                });\n                this.setState({\n                    bankName\n                });\n            });\n    }\n\n    // method, which checks, if the bank account is correct\n    checkBankAccount = () => {\n        let accountToCheck = this.state.bankAccountNumber.slice(2);\n        for (let i = 0; i < 2; i++) {\n            const numberFromLetter = this.getNumberFromLetter(this.state.bankAccountCountry[i]);\n            if (numberFromLetter === 0) {\n                this.setState({\n                    bankAccountChecked: true,\n                    bankAccountCorrect: false\n                });\n                return;\n            }\n            accountToCheck += numberFromLetter\n        }\n        accountToCheck += this.state.bankAccountNumber.slice(0, 2);\n\n        let rest = 0;\n\n        for (let i = 0; i < 4; i++) {\n            let numberToCount = 0;\n            if (i === 3) {\n                numberToCount = rest + accountToCheck.slice(24);\n            } else {\n                numberToCount = rest + accountToCheck.slice((8 * i), (8 * i + 8));\n            }\n            rest = numberToCount % 97;\n        }\n\n        return (rest === 1);\n    }\n\n    // method, which replace letters, from the bank account number, with numbers\n    getNumberFromLetter = (letter) => {\n        let number = 0;\n        this.letterConverters.forEach(letterConverter => {\n            if (letterConverter.letter === letter.toLowerCase()) {\n                number = letterConverter.number;\n            }\n        });\n        return number;\n    }\n\n    // method, which downloads letter converters from another file and saves it in this component\n    fetchLetterConverters = () => {\n        fetch('data/letterConverters.json')\n            .then(response => response.json())\n            .then(data => {\n                this.letterConverters = data.converters;\n            });\n    }\n\n    // method, which is called after first rendering the component - it calls fetch method, which gets letter converters from another file\n    componentDidMount() {\n        this.fetchLetterConverters();\n    }\n\n    // rendering the component with two parts - form to enter bank account number and the program result\n    render() {\n        return (\n            <section className=\"bankAccount\">\n                <form onSubmit={this.handleSubmitBankAccount}>\n                    <span>Podaj numer konta:</span>\n                    <div className=\"bankAccount\">\n                        <input\n                            type=\"text\"\n                            value={this.state.bankAccountCountry}\n                            readOnly={true}\n                        />\n                        <input\n                            type=\"number\"\n                            value={this.state.bankAccountNumber}\n                            onChange={this.handleChangeBankAccount}\n                        />\n                    </div>\n                    <button>Sprawdź</button>\n                </form>\n                {this.state.bankAccountChecked ? (\n                    <div className=\"result\">\n                        <h2>Weryfikacja</h2>\n                        <p>\n                            {this.state.bankAccountCorrect ? (\n                                <span className=\"correct\"><i className=\"fas fa-check-circle\"></i> numer poprawny</span>\n                            ) : (\n                                    <span className=\"incorrect\"><i className=\"fas fa-times-circle\"></i> numer błędny</span>\n                                )\n                            }\n                        </p>\n                        {this.state.bankAccountCorrect ? <p>Nazwa banku: <span>{this.state.bankName}</span></p> : null}\n                    </div>\n                ) : null}\n            </section>\n        );\n    }\n}\n\nexport default BankAccount;","import React from 'react';\n\nconst ErrorPage = () => {\n    return (\n        <section>\n            <h2>Błąd wczytywania strony - sprawdź poprawność adresu.</h2>\n        </section>\n    );\n}\n\nexport default ErrorPage;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Pesel from '../pages/Pesel';\nimport Nip from '../pages/Nip';\nimport Regon from '../pages/Regon';\nimport IdCard from '../pages/IdCard';\nimport BankAccount from '../pages/BankAccount';\nimport ErrorPage from '../pages/ErrorPage';\n\nconst Page = () => {\n    return (\n        <Switch>\n            <Route path=\"/\" exact component={Pesel} />\n            <Route path=\"/nip\" component={Nip} />\n            <Route path=\"/regon\" component={Regon} />\n            <Route path=\"/idcard\" component={IdCard} />\n            <Route path=\"/bankaccount\" component={BankAccount} />\n            <Route component={ErrorPage} />\n        </Switch>\n    );\n}\n\nexport default Page;","import React from 'react';\nimport '../styles/Footer.css';\n\nconst Footer = () => {\n    return (\n        <>\n            <p>&copy; 2019, created by <span>Radosław Kołodziejczyk</span></p>\n        </>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Header from './Header';\nimport Navigation from './Navigation';\nimport Page from './Page';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"app\">\n          <>\n            <Navigation />\n          </>\n          <header>\n            <Header />\n          </header>\n          <main>\n            <Page />\n          </main>\n          <footer>\n            <Footer />\n          </footer>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './layouts/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}